// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main Crdt vocabulary class containing all terms
///
/// Contains all terms defined in the https://w3id.org/solid-crdt-sync/vocab/idx# vocabulary.
class Crdt {
  // Private constructor prevents instantiation
  const Crdt._();

  /// Base IRI for Crdt vocabulary
  /// [Spec](https://w3id.org/solid-crdt-sync/vocab/idx#)
  static const String namespace = 'https://w3id.org/solid-crdt-sync/vocab/idx#';
  static const String prefix = 'crdt';

  /// IRI for crdt:Index
  ///
  /// An abstract base class for any sharded index that directly contains entries pointing to data resources.
  ///
  static const Index = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#Index',
  );

  /// IRI for crdt:FullIndex
  ///
  /// A concrete index for a FullSync or OnDemandSync strategy. It represents a single, self-contained index for a whole class of data.
  ///
  static const FullIndex = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#FullIndex',
  );

  /// IRI for crdt:GroupIndexTemplate
  ///
  /// A 'rulebook' resource that defines how a data type is grouped. It does not contain data entries itself, but points to the GroupIndex instances that do.
  ///
  static const GroupIndexTemplate = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#GroupIndexTemplate',
  );

  /// IRI for crdt:GroupIndex
  ///
  /// A concrete index representing a single, logical subset of data (e.g., 'August 2025'). It functions like a FullIndex but for a group.
  ///
  static const GroupIndex = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#GroupIndex',
  );

  /// IRI for crdt:GroupingRule
  ///
  /// A declarative rule that describes how a data resource should be assigned to a specific group based on its properties. Contains multiple GroupingRuleProperty instances. Group paths are generated deterministically from the properties.
  ///
  static const GroupingRule = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRule',
  );

  /// IRI for crdt:GroupingRuleProperty
  ///
  /// An individual property specification within a GroupingRule that defines how to extract and format values from a source property for group assignment.
  ///
  static const GroupingRuleProperty = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRuleProperty',
  );

  /// IRI for crdt:ModuloHashSharding
  ///
  /// A sharding strategy that calculates a hash of a resource's IRI and then uses the modulo operator to assign it to a shard.
  ///
  static const ModuloHashSharding = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#ModuloHashSharding',
  );

  /// IRI for crdt:Shard
  ///
  /// A document that contains a list of entries, each pointing to a data resource and its associated metadata (e.g., Hybrid Logical Clock hash).
  ///
  static const Shard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#Shard',
  );

  /// IRI for crdt:ShardEntry
  ///
  /// A structured entry within a shard that contains a reference to a data resource plus optional header properties and required clock hash metadata.
  ///
  static const ShardEntry = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#ShardEntry',
  );

  /// IRI for crdt:IndexedProperty
  ///
  /// A configuration object that specifies which property should be indexed and tracks which installations actively read from it. Used within idx:indexedProperty to enable property-level reader management.
  ///
  static const IndexedProperty = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#IndexedProperty',
  );

  /// IRI for crdt:RegexTransform
  ///
  /// A transform rule that applies regex pattern matching and replacement to RDF literal values for group key generation. Uses cross-platform compatible regex subset.
  ///
  static const RegexTransform = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#RegexTransform',
  );

  /// IRI for crdt:belongsToIndexShard [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data resource to the specific index shard it is a member of.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const belongsToIndexShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#belongsToIndexShard',
  );

  /// IRI for crdt:indexesClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// Specifies which class of resource this index tracks (e.g., schema:Recipe, idx:Shard, sync:ManagedDocument). Index entries contain resource-level properties for querying, while sync operations depend on resource type: if resources are documents themselves (e.g., idx:FullIndex), all operations are document-level; if resources use fragment identifiers (e.g., schema:Recipe), sync operations are on the containing document while resource operations are on the specific resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const indexesClass = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#indexesClass',
  );

  /// IRI for crdt:indexedProperty [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#IndexedProperty]
  ///
  /// Links an index to an IndexedProperty configuration object that specifies which property should be indexed and tracks which installations read from it.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const indexedProperty = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#indexedProperty',
  );

  /// IRI for crdt:hasShard [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links an Index to its shard files. This provides the canonical list of active shards.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Index
  ///
  static const hasShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#hasShard',
  );

  /// IRI for crdt:shardingAlgorithm [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Defines the algorithm used to place new items into shards.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const shardingAlgorithm = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#shardingAlgorithm',
  );

  /// IRI for crdt:hashAlgorithm [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// The hashing algorithm to be used (e.g., 'md5').
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#ModuloHashSharding
  ///
  static const hashAlgorithm = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#hashAlgorithm',
  );

  /// IRI for crdt:numberOfShards [Expects: http://www.w3.org/2001/XMLSchema#integer]
  ///
  /// The number of shards to distribute items across.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#ModuloHashSharding
  ///
  static const numberOfShards = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#numberOfShards',
  );

  /// IRI for crdt:configVersion [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// Version string for shard configuration using format 'major_scale_conflict' where major is developer-controlled, scale auto-increments for capacity scaling, and conflict auto-increments for 2P-Set resolution.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#ModuloHashSharding
  ///
  static const configVersion = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#configVersion',
  );

  /// IRI for crdt:autoScaleThreshold [Expects: http://www.w3.org/2001/XMLSchema#integer]
  ///
  /// The number of entries per shard that triggers automatic scaling to more shards (default: 1000).
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#ModuloHashSharding
  ///
  static const autoScaleThreshold = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#autoScaleThreshold',
  );

  /// IRI for crdt:isShardOf [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#Index]
  ///
  /// A back-link from a shard to the root index or partition it belongs to.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const isShardOf = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#isShardOf',
  );

  /// IRI for crdt:groupedBy [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRule]
  ///
  /// Links a GroupIndexTemplate to its declarative GroupingRule.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupIndexTemplate
  ///
  static const groupedBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#groupedBy',
  );

  /// IRI for crdt:property [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRuleProperty]
  ///
  /// Links a GroupingRule to its GroupingRuleProperty instances. Multi-value property for complex grouping scenarios.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRule
  ///
  static const property = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#property',
  );

  /// IRI for crdt:sourceProperty [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// The property in the data resource to extract grouping values from.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRuleProperty
  ///
  static const sourceProperty = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#sourceProperty',
  );

  /// IRI for crdt:transform [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// Ordered list of regex transform rules to apply to the sourceProperty's value for group key generation. Transforms are tried in order, first match wins.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRuleProperty
  ///
  static const transform = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#transform',
  );

  /// IRI for crdt:hierarchyLevel [Expects: http://www.w3.org/2001/XMLSchema#integer]
  ///
  /// Optional hierarchy level for multi-property grouping (default: 1). Properties with explicit levels create nested directory structures sorted by level. Properties without levels are joined with '-' separator after lexicographic IRI ordering.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRuleProperty
  ///
  static const hierarchyLevel = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#hierarchyLevel',
  );

  /// IRI for crdt:missingValue [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// Optional default value to use when the sourceProperty is absent. If not specified, resources without this property create no groups.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupingRuleProperty
  ///
  static const missingValue = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#missingValue',
  );

  /// IRI for crdt:basedOn [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#GroupIndexTemplate]
  ///
  /// A back-link from a GroupIndex to the GroupIndexTemplate rulebook that defines it.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#GroupIndex
  ///
  static const basedOn = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#basedOn',
  );

  /// IRI for crdt:containsEntry [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#ShardEntry]
  ///
  /// Links a Shard to a structured entry containing resource reference and metadata.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Shard
  ///
  static const containsEntry = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#containsEntry',
  );

  /// IRI for crdt:readBy [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// An OR-Set of installation IRIs that actively read from this index or specific indexed property. Used for collaborative lifecycle management and property cleanup when readers are tombstoned.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const readBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#readBy',
  );

  /// IRI for crdt:populationState [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// State of index population process. Values: 'populating' (initial background processing required), 'active' (ready for normal use). Uses LWW_Register for collaborative state transitions.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Index
  ///
  static const populationState = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#populationState',
  );

  /// IRI for crdt:hasPopulatingShard [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// References temporary populating shards used during distributed index creation. These shards are tombstoned when population is complete. Uses OR-Set for collaborative shard management.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Index
  ///
  static const hasPopulatingShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#hasPopulatingShard',
  );

  /// IRI for crdt:resource [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Points to the actual data resource from a shard entry. Links shard entry metadata to the primary resource.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#ShardEntry
  ///
  static const resource = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#resource',
  );

  /// IRI for crdt:trackedProperty [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// Specifies which RDF property is being tracked in an indexed property configuration object.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#IndexedProperty
  ///
  static const trackedProperty = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#trackedProperty',
  );

  /// IRI for crdt:pattern [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// Cross-platform compatible regex pattern for matching RDF literal values. No alternation (|) or named character classes allowed.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#RegexTransform
  ///
  static const pattern = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#pattern',
  );

  /// IRI for crdt:replacement [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// Replacement template with ${n} backreferences to capture groups. Uses braced syntax for maximum cross-platform compatibility.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#RegexTransform
  ///
  static const replacement = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#replacement',
  );
}
