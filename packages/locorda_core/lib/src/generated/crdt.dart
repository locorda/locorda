// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main Crdt vocabulary class containing all terms
///
/// Contains all terms defined in the https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics# vocabulary.
class Crdt {
  // Private constructor prevents instantiation
  const Crdt._();

  /// Base IRI for Crdt vocabulary
  /// [Spec](https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#)
  static const String namespace =
      'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#';
  static const String prefix = 'crdt';

  /// IRI for crdt:ClockEntry
  ///
  /// A single entry in a Hybrid Logical Clock (HLC), mapping an installation ID to both its logical time (causality counter) and physical time (wall-clock timestamp for tie-breaking).
  ///
  static const ClockEntry = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry',
  );

  /// IRI for crdt:ClientInstallation
  ///
  /// A unique installation of a CRDT-enabled application, providing traceability and identity for Hybrid Logical Clock entries across the distributed system.
  ///
  static const ClientInstallation = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClientInstallation',
  );

  /// IRI for crdt:hasClockEntry [Expects: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry]
  ///
  /// Links a resource to a blank node representing a single entry in its Hybrid Logical Clock (HLC). Each entry tracks both logical time (causality) and physical time (for intuitive tie-breaking) for one installation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const hasClockEntry = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#hasClockEntry',
  );

  /// IRI for crdt:installationId [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The unique identifier for a client installation within a Hybrid Logical Clock entry. Corresponds to 'client ID' in CRDT literature, but uses 'installation' to avoid confusion with storage backend client identifiers.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry
  ///
  static const installationId = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#installationId',
  );

  /// IRI for crdt:logicalTime [Expects: http://www.w3.org/2001/XMLSchema#long]
  ///
  /// The logical time component of a Hybrid Logical Clock entry - a monotonically increasing counter that tracks causality relationships between operations. Provides tamper-proof causality tracking even when physical clocks are manipulated.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry
  ///
  static const logicalTime = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#logicalTime',
  );

  /// IRI for crdt:physicalTime [Expects: http://www.w3.org/2001/XMLSchema#long]
  ///
  /// The physical time component of a Hybrid Logical Clock entry - wall-clock timestamp in milliseconds since Unix epoch. Used for intuitive tie-breaking when operations are truly concurrent (logical times don't establish dominance).
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry
  ///
  static const physicalTime = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#physicalTime',
  );

  /// IRI for crdt:clockHash [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// A pre-calculated, lightweight hash of the resource's full Hybrid Logical Clock, used for efficient change detection in indices. Hash includes both logical and physical time components. Domain is kept general (rdfs:Resource) to allow usage in various contexts including idx:ShardEntry instances.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const clockHash = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#clockHash',
  );

  /// IRI for crdt:belongsToUser [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links an installation to the user identity that owns it. In Solid contexts, this would be a WebID; in other contexts, this could be any user identifier.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClientInstallation
  ///
  static const belongsToUser = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#belongsToUser',
  );

  /// IRI for crdt:applicationId [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The unique identifier for the application that created this installation. In Solid contexts, this would be the OIDC Client ID; in other contexts, this could be any application identifier.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClientInstallation
  ///
  static const applicationId = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#applicationId',
  );

  /// IRI for crdt:createdAt [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Framework-managed timestamp marking when a document or installation was created/recreated. Uses OR-Set semantics to support recreation scenarios and solve zombie deletion problems. Combined with crdt:deletedAt using temporal ordering: document is deleted if max(deletedAt) > max(createdAt). Framework automatically adds creation timestamps during document creation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const createdAt = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#createdAt',
  );

  /// IRI for crdt:lastActiveAt [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Timestamp of the last activity from this installation. Updated collaboratively by other installations to track dormancy.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClientInstallation
  ///
  static const lastActiveAt = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#lastActiveAt',
  );

  /// IRI for crdt:maxInactivityPeriod [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration after which this installation should be considered for tombstoning if no activity is detected. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). If not specified, uses framework default.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClientInstallation
  ///
  static const maxInactivityPeriod = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#maxInactivityPeriod',
  );

  /// IRI for crdt:deletedAt [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Framework-managed timestamp marking when a document or property value was deleted. For documents: uses OR-Set semantics combined with crdt:createdAt for temporal lifecycle management (document deleted if max(deletedAt) > max(createdAt)), solving zombie deletion problems during recreation scenarios. For property values: simple tombstone semantics using RDF reification (value deleted if reification statement with crdt:deletedAt exists). Framework automatically manages this property by detecting deletions through state comparison - developers simply provide updated resource state and the library implementation handles tombstone creation automatically.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const deletedAt = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#deletedAt',
  );

  /// IRI for crdt:documentTombstoneRetentionPeriod [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration to retain document tombstones (complete deleted documents) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P2Y' for 2 years). Applied to storage backend configuration documents. Longer retention recommended due to high impact of zombie deletions affecting recreated documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const documentTombstoneRetentionPeriod = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#documentTombstoneRetentionPeriod',
  );

  /// IRI for crdt:enableDocumentTombstoneCleanup [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// Boolean flag indicating whether the framework should automatically clean up document tombstones after the retention period. Applied to storage backend configuration documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const enableDocumentTombstoneCleanup = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#enableDocumentTombstoneCleanup',
  );

  /// IRI for crdt:propertyTombstoneRetentionPeriod [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration to retain property tombstones (deleted values within multi-value properties) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). Applied to storage backend configuration documents. Shorter retention acceptable due to lower impact of zombie deletions.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const propertyTombstoneRetentionPeriod = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#propertyTombstoneRetentionPeriod',
  );

  /// IRI for crdt:enablePropertyTombstoneCleanup [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// Boolean flag indicating whether the framework should automatically clean up property tombstones after the retention period. Applied to storage backend configuration documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const enablePropertyTombstoneCleanup = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#enablePropertyTombstoneCleanup',
  );
}
