@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix crdt: <https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#> .
@prefix algo: <https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#> .
@prefix sync: <https://w3id.org/solid-crdt-sync/vocab/sync#> .
@prefix mc: <https://w3id.org/solid-crdt-sync/vocab/merge-contract#> .
@prefix idx: <https://w3id.org/solid-crdt-sync/vocab/idx#> .
@prefix mappings: <https://w3id.org/solid-crdt-sync/mappings/> .

# Core merge contract mappings for CRDT framework infrastructure
# This DocumentMapping provides essential merge rules that most applications need

<> a mc:DocumentMapping;
   # Define class mappings for framework components
   mc:classMapping ( <#managed-document> <#statement> <#resource-statement> <#blank-node-mapping> ) ;
   # Define predicate mappings for framework components (ordered list)
   mc:predicateMapping ( <#clock-mappings> <#lifecycle-mappings> <#traversal-boundaries> ) .

# ManagedDocument is the wrapper for all CRDT-managed resources
<#managed-document> a mc:ClassMapping;
   mc:appliesToClass sync:ManagedDocument;
   mc:rule
     [ mc:predicate foaf:primaryTopic; algo:mergeWith algo:Immutable ],  # The resource being managed
     [ mc:predicate sync:isGovernedBy; algo:mergeWith algo:LWW_Register; mc:disableBlankNodePathIdentification true ],  # Merge contract list - rdf:List, currently only LWW_Register possible (append-only)
     [ mc:predicate sync:managedResourceType; algo:mergeWith algo:Immutable ],  # Resource type for discovery
     [ mc:predicate idx:belongsToIndexShard; algo:mergeWith algo:OR_Set ],  # Index shard memberships
     [ mc:predicate sync:hasBlankNodeMapping; algo:mergeWith algo:OR_Set ] .  # Blank node canonical mappings

# Merge contract for RDF reified statements used as tombstones in CRDT sets
<#statement> a mc:ClassMapping;
   mc:appliesToClass rdf:Statement;
   mc:rule
     # The subject, predicate, and object of the reified statement are immutable identifiers
     [ mc:predicate rdf:subject; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate rdf:predicate; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate rdf:object; algo:mergeWith algo:LWW_Register ] .

# Standard mapping for predicates of Hybrid Logical Clock entries (fragment-identified nodes)  
<#clock-mappings> a mc:PredicateMapping;
   mc:rule
     [ mc:predicate crdt:installationId; algo:mergeWith algo:OR_Set],
     [ mc:predicate crdt:hasClockEntry; algo:mergeWith algo:OR_Set ],
     [ mc:predicate crdt:clockHash; algo:mergeWith algo:LWW_Register ],
     [ mc:predicate crdt:logicalTime; algo:mergeWith algo:G_Register ],
     [ mc:predicate crdt:physicalTime; algo:mergeWith algo:G_Register ] .

# Merge contract for ResourceStatement used for resource-level framework metadata
<#resource-statement> a mc:ClassMapping;
   mc:appliesToClass sync:ResourceStatement;
   mc:rule
     # The resource identifier is the immutable identity of this statement
     [ mc:predicate sync:resource; algo:mergeWith algo:LWW_Register; mc:isIdentifying true ] .

# Merge contract for BlankNodeMapping - framework-reserved fragments for identified blank nodes
<#blank-node-mapping> a mc:ClassMapping;
   mc:appliesToClass sync:BlankNodeMapping;
   mc:rule
     # The blank node reference itself uses LWW and stops traversal into app data
     [ mc:predicate sync:blankNode; algo:mergeWith algo:LWW_Register; mc:stopTraversal true ] .

# Standard mapping for lifecycle semantics across all CRDT contexts
<#lifecycle-mappings> a mc:PredicateMapping;
   mc:rule
     # Global lifecycle semantics - applies to all contexts where lifecycle properties are used
     # Uses temporal ordering: document/value is deleted if max(crdt:deletedAt) > max(crdt:createdAt)
     # Solves zombie deletion problems during document recreation scenarios
     [ mc:predicate rdf:type; algo:mergeWith algo:LWW_Register ],  # rdf:type
     [ mc:predicate crdt:createdAt; algo:mergeWith algo:OR_Set ],  # Creation/recreation timestamps
     [ mc:predicate crdt:deletedAt; algo:mergeWith algo:OR_Set ] . # Deletion timestamps

# Framework/app data separation boundaries
<#traversal-boundaries> a mc:PredicateMapping;
   mc:rule
     # Standard semantic web predicate for document primary topic
     [ mc:predicate foaf:primaryTopic; mc:stopTraversal true ],
     # Standard RDF reification predicates create traversal boundaries
     [ mc:predicate rdf:subject; mc:stopTraversal true ],
     [ mc:predicate rdf:predicate; mc:stopTraversal true ],
     [ mc:predicate rdf:object; mc:stopTraversal true ] .