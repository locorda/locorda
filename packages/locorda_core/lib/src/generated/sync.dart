// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main Sync vocabulary class containing all terms
///
/// Contains all terms defined in the https://w3id.org/solid-crdt-sync/vocab/sync# vocabulary.
class Sync {
  // Private constructor prevents instantiation
  const Sync._();

  /// Base IRI for Sync vocabulary
  /// [Spec](https://w3id.org/solid-crdt-sync/vocab/sync#)
  static const String namespace =
      'https://w3id.org/solid-crdt-sync/vocab/sync#';
  static const String prefix = 'sync';

  /// IRI for sync:ManagedDocument
  ///
  /// A document that is managed by the locorda sync framework, containing framework metadata and a primary resource topic.
  ///
  static const ManagedDocument = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#ManagedDocument',
  );

  /// IRI for sync:ResourceStatement
  ///
  /// A statement containing framework metadata about a specific resource within a managed document. Used for resource-level concerns like deletion tombstones while maintaining clean separation from application data.
  ///
  static const ResourceStatement = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#ResourceStatement',
  );

  /// IRI for sync:isGovernedBy [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data or index resource to the public rules file that defines its merge behavior.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const isGovernedBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#isGovernedBy',
  );

  /// IRI for sync:managedResourceType [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// Identifies the semantic RDF class of the resources being managed (e.g., schema:Recipe). Used in two contexts: (1) Within solid:TypeRegistration entries where solid:forClass is sync:ManagedDocument, enabling framework-aware applications to discover containers holding specific semantic types. (2) Directly on sync:ManagedDocument instances to enable efficient garbage collection and retention policies without requiring document content fetching.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const managedResourceType = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#managedResourceType',
  );

  /// IRI for sync:hasStatement [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement]
  ///
  /// Links a managed document to RDF reification statements that contain framework metadata such as property tombstones. This ensures all framework metadata remains connected to the document for proper framework/app data separation during graph traversal.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/sync#ManagedDocument
  ///
  static const hasStatement = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#hasStatement',
  );

  /// IRI for sync:resource [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Points to the resource that this framework statement is about. Used in resource statements to identify which resource the metadata applies to.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/sync#ResourceStatement
  ///
  static const resource = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#resource',
  );
}
