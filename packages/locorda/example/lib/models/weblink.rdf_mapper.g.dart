// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: lib/models/weblink.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field, unnecessary_string_interpolations

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'package:personal_notes_app/models/weblink.dart' as weblink;
import 'package:personal_notes_app/vocabulary/personal_notes_vocab.dart';
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [weblink.Weblink] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `weblink.Weblink`.
class WeblinkMapper implements LocalResourceMapper<weblink.Weblink> {
  /// Constructor
  const WeblinkMapper();

  @override
  IriTerm? get typeIri => PersonalNotesVocab.Weblink;

  @override
  weblink.Weblink fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String url = reader.require(Schema.url);
    final String? title = reader.optional(Schema.name);
    final String? description = reader.optional(Schema.description);

    return weblink.Weblink(url: url, title: title, description: description);
  }

  @override
  (BlankNodeTerm, Iterable<Triple>) toRdfResource(
    weblink.Weblink resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(Schema.url, resource.url)
        .when(
          resource.title != null,
          (b) => b.addValue(Schema.name, resource.title),
        )
        .when(
          resource.description != null,
          (b) => b.addValue(Schema.description, resource.description),
        )
        .build();
  }
}
