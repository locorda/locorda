// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Index class from Idx vocabulary
///
/// An abstract base class for any sharded index that directly contains entries pointing to data resources.
///
/// Inherits from:
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
///
/// This class provides access to all properties that can be used with Index.
/// [Class Reference](https://w3id.org/solid-crdt-sync/vocab/idx#Index)
///
/// [Vocabulary Reference](https://w3id.org/solid-crdt-sync/vocab/idx#)
class IdxIndex {
  // Private constructor prevents instantiation
  const IdxIndex._();

  /// IRI term for the Index class
  /// Use this to specify that a resource is of this type.
  static const classIri = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#Index',
  );

  /// belongsToIndexShard [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data resource to the specific index shard it is a member of.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const belongsToIndexShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#belongsToIndexShard',
  );

  /// indexesClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// Specifies which class of resource this index tracks (e.g., schema:Recipe, idx:Shard, sync:ManagedDocument). Index entries contain resource-level properties for querying, while sync operations depend on resource type: if resources are documents themselves (e.g., idx:FullIndex), all operations are document-level; if resources use fragment identifiers (e.g., schema:Recipe), sync operations are on the containing document while resource operations are on the specific resource.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const indexesClass = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#indexesClass',
  );

  /// indexedProperty [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#IndexedProperty]
  ///
  /// Links an index to an IndexedProperty configuration object that specifies which property should be indexed and tracks which installations read from it.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const indexedProperty = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#indexedProperty',
  );

  /// hasShard [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links an Index to its shard files. This provides the canonical list of active shards.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Index
  ///
  static const hasShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#hasShard',
  );

  /// shardingAlgorithm [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Defines the algorithm used to place new items into shards.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const shardingAlgorithm = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#shardingAlgorithm',
  );

  /// isShardOf [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#Index]
  ///
  /// A back-link from a shard to the root index or partition it belongs to.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const isShardOf = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#isShardOf',
  );

  /// readBy [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// An OR-Set of installation IRIs that actively read from this index or specific indexed property. Used for collaborative lifecycle management and property cleanup when readers are tombstoned.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const readBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#readBy',
  );

  /// populationState [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// State of index population process. Values: 'populating' (initial background processing required), 'active' (ready for normal use). Uses LWW_Register for collaborative state transitions.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Index
  ///
  static const populationState = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#populationState',
  );

  /// hasPopulatingShard [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// References temporary populating shards used during distributed index creation. These shards are tombstoned when population is complete. Uses OR-Set for collaborative shard management.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/idx#Index
  ///
  static const hasPopulatingShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#hasPopulatingShard',
  );

  /// hasClockEntry from crdt vocabulary [Expects: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry]
  ///
  /// Links a resource to a blank node representing a single entry in its Hybrid Logical Clock (HLC). Each entry tracks both logical time (causality) and physical time (for intuitive tie-breaking) for one installation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtHasClockEntry = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#hasClockEntry',
  );

  /// clockHash from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// A pre-calculated, lightweight hash of the resource's full Hybrid Logical Clock, used for efficient change detection in indices. Hash includes both logical and physical time components. Domain is kept general (rdfs:Resource) to allow usage in various contexts including idx:ShardEntry instances.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtClockHash = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#clockHash',
  );

  /// createdAt from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Framework-managed timestamp marking when a document or installation was created/recreated. Uses OR-Set semantics to support recreation scenarios and solve zombie deletion problems. Combined with crdt:deletedAt using temporal ordering: document is deleted if max(deletedAt) > max(createdAt). Framework automatically adds creation timestamps during document creation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtCreatedAt = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#createdAt',
  );

  /// deletedAt from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Framework-managed timestamp marking when a document or property value was deleted. For documents: uses OR-Set semantics combined with crdt:createdAt for temporal lifecycle management (document deleted if max(deletedAt) > max(createdAt)), solving zombie deletion problems during recreation scenarios. For property values: simple tombstone semantics using RDF reification (value deleted if reification statement with crdt:deletedAt exists). Framework automatically manages this property by detecting deletions through state comparison - developers simply provide updated resource state and the library implementation handles tombstone creation automatically.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtDeletedAt = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#deletedAt',
  );

  /// documentTombstoneRetentionPeriod from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration to retain document tombstones (complete deleted documents) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P2Y' for 2 years). Applied to storage backend configuration documents. Longer retention recommended due to high impact of zombie deletions affecting recreated documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtDocumentTombstoneRetentionPeriod = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#documentTombstoneRetentionPeriod',
  );

  /// enableDocumentTombstoneCleanup from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// Boolean flag indicating whether the framework should automatically clean up document tombstones after the retention period. Applied to storage backend configuration documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtEnableDocumentTombstoneCleanup = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#enableDocumentTombstoneCleanup',
  );

  /// propertyTombstoneRetentionPeriod from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration to retain property tombstones (deleted values within multi-value properties) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). Applied to storage backend configuration documents. Shorter retention acceptable due to lower impact of zombie deletions.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtPropertyTombstoneRetentionPeriod = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#propertyTombstoneRetentionPeriod',
  );

  /// enablePropertyTombstoneCleanup from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// Boolean flag indicating whether the framework should automatically clean up property tombstones after the retention period. Applied to storage backend configuration documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtEnablePropertyTombstoneCleanup = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#enablePropertyTombstoneCleanup',
  );

  /// isGovernedBy from sync vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data or index resource to the public rules file that defines its merge behavior.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const syncIsGovernedBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#isGovernedBy',
  );

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = const IriTerm(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = const IriTerm(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );
}
