// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
//
// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_mapper/rdf_mapper.dart';

import 'package:personal_notes_app/models/category.dart' as category;
import 'package:personal_notes_app/models/category.rdf_mapper.g.dart' as crmg;
import 'package:locorda_core/locorda_core.dart' as locorda_core;
import 'package:personal_notes_app/models/category_display_settings.dart'
    as cds;
import 'package:personal_notes_app/models/category_display_settings.rdf_mapper.g.dart'
    as cdsrmg;
import 'package:personal_notes_app/models/note.dart' as note;
import 'package:personal_notes_app/models/note.rdf_mapper.g.dart' as nrmg;
import 'package:personal_notes_app/models/note_group_key.dart' as ngk;
import 'package:personal_notes_app/models/note_group_key.rdf_mapper.g.dart'
    as ngkrmg;
import 'package:personal_notes_app/models/note_index_entry.dart' as nie;
import 'package:personal_notes_app/models/note_index_entry.rdf_mapper.g.dart'
    as niermg;
import 'package:personal_notes_app/models/weblink.dart' as weblink;
import 'package:personal_notes_app/models/weblink.rdf_mapper.g.dart' as wrmg;

/// Initializes and returns an RdfMapper with mappers registered.
///
/// [rdfMapper] An optional RdfMapper instance to use. If not provided, a new one will be created.
/// * [$indexItemIriFactory]
/// * [$resourceIriFactory]
/// * [$resourceRefFactory]
RdfMapper initRdfMapper({
  RdfMapper? rdfMapper,
  required IriTermMapper<(String id,)> Function<T>(Type) $indexItemIriFactory,
  required IriTermMapper<(String id,)> Function<T>(locorda_core.RootIriConfig)
  $resourceIriFactory,
  required IriTermMapper<String> Function<T>(Type) $resourceRefFactory,
}) {
  if (rdfMapper == null) {
    rdfMapper = RdfMapper.withDefaultRegistry();
  }
  var registry = rdfMapper.registry;

  registry.registerMapper<category.Category>(
    crmg.CategoryMapper(
      iriMapper: $resourceIriFactory<category.Category>(
        const locorda_core.RootIriConfig('it'),
      ),
    ),
  );
  registry.registerMapper<cds.CategoryDisplaySettings>(
    cdsrmg.CategoryDisplaySettingsMapper(),
  );
  registry.registerMapper<note.Note>(
    nrmg.NoteMapper(
      categoryIdMapper: $resourceRefFactory<String?>(category.Category),
      iriMapper: $resourceIriFactory<note.Note>(
        const locorda_core.RootIriConfig('note'),
      ),
    ),
  );
  registry.registerMapper<ngk.NoteGroupKey>(ngkrmg.NoteGroupKeyMapper());
  registry.registerDeserializer<nie.NoteIndexEntry>(
    niermg.NoteIndexEntryMapper(
      categoryIdMapper: $resourceRefFactory<String?>(category.Category),
      iriMapper: $indexItemIriFactory<nie.NoteIndexEntry>(note.Note),
    ),
  );
  registry.registerMapper<weblink.Weblink>(wrmg.WeblinkMapper());

  return rdfMapper;
}
