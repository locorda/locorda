@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix crdt: <https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#> .
@prefix solid: <http://www.w3.org/ns/solid/terms#> .

# --- Ontology Definition ---

<https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#> a owl:Ontology;
    rdfs:label "CRDT Framework Mechanics Vocabulary";
    rdfs:comment "A vocabulary defining the low-level operational mechanics and infrastructure properties required for CRDT synchronization coordination, including hybrid logical clocks, installation management, and deletion handling." .

# --- Framework Infrastructure Classes ---

crdt:ClockEntry a rdfs:Class;
    rdfs:label "Clock Entry";
    rdfs:comment "A single entry in a Hybrid Logical Clock (HLC), mapping an installation IRI to both its logical time (causality counter) and physical time (wall-clock timestamp for tie-breaking). NOTE: It is really important that this is not a blank node, but a IRI identified resource where the fragment is used for actually identifying the installation, so that the fragment is stable across different possible backends (and local)." .

crdt:ClientInstallation a rdfs:Class;
    rdfs:label "Client Installation";
    rdfs:comment "A unique installation of a CRDT-enabled application, providing traceability and identity for Hybrid Logical Clock entries across the distributed system." .

# --- Hybrid Logical Clock Properties ---

crdt:hasClockEntry a rdf:Property;
    rdfs:label "has clock entry";
    rdfs:comment "Links a resource to a IRI resource representing a single entry in its Hybrid Logical Clock (HLC). Each entry tracks both logical time (causality) and physical time (for intuitive tie-breaking) for one installation.";
    rdfs:domain rdfs:Resource;
    rdfs:range crdt:ClockEntry .

crdt:installationIri a rdf:Property;
    rdfs:label "installation IRI";
    rdfs:comment "IRI for a client installation within a Hybrid Logical Clock entry. ";
    rdfs:domain crdt:ClockEntry;
    rdfs:range rdfs:Resource . # Should be an IRI

crdt:logicalTime a rdf:Property;
    rdfs:label "logical time";
    rdfs:comment "The logical time component of a Hybrid Logical Clock entry - a monotonically increasing counter that tracks causality relationships between operations. Provides tamper-proof causality tracking even when physical clocks are manipulated.";
    rdfs:domain crdt:ClockEntry;
    rdfs:range xsd:long .

crdt:physicalTime a rdf:Property;
    rdfs:label "physical time";
    rdfs:comment "The physical time component of a Hybrid Logical Clock entry - wall-clock timestamp in milliseconds since Unix epoch. Used for intuitive tie-breaking when operations are truly concurrent (logical times don't establish dominance).";
    rdfs:domain crdt:ClockEntry;
    rdfs:range xsd:long .

crdt:clockHash a rdf:Property;
    rdfs:label "clock hash";
    rdfs:comment "A pre-calculated, lightweight hash of the resource's full Hybrid Logical Clock, used for efficient change detection in indices. Hash includes both logical and physical time components. Domain is kept general (rdfs:Resource) to allow usage in various contexts including idx:ShardEntry instances.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:string .

# --- Installation Management Properties ---

crdt:belongsToUser a rdf:Property;
    rdfs:label "belongs to user";
    rdfs:comment "Links an installation to the user identity that owns it. In Solid contexts, this would be a WebID; in other contexts, this could be any user identifier.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range rdfs:Resource .

crdt:applicationId a rdf:Property;
    rdfs:label "application ID";
    rdfs:comment "The unique identifier for the application that created this installation. In Solid contexts, this would be the OIDC Client ID; in other contexts, this could be any application identifier.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range rdfs:Resource .

crdt:createdAt a rdf:Property;
    rdfs:label "created at";
    rdfs:comment "Framework-managed timestamp marking when a document or installation was created/recreated. Uses OR-Set semantics to support recreation scenarios and solve zombie deletion problems. Combined with crdt:deletedAt using temporal ordering: document is deleted if max(deletedAt) > max(createdAt). Framework automatically adds creation timestamps during document creation.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:dateTime .

crdt:lastActiveAt a rdf:Property;
    rdfs:label "last active at";
    rdfs:comment "Timestamp of the last activity from this installation. Updated collaboratively by other installations to track dormancy.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range xsd:dateTime .

crdt:maxInactivityPeriod a rdf:Property;
    rdfs:label "maximum inactivity period";
    rdfs:comment "Duration after which this installation should be considered for tombstoning if no activity is detected. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). If not specified, uses framework default.";
    rdfs:domain crdt:ClientInstallation;
    rdfs:range xsd:duration .

# --- Deletion and Cleanup Properties ---

crdt:deletedAt a rdf:Property;
    rdfs:label "deleted at";
    rdfs:comment "Framework-managed timestamp marking when a document or property value was deleted. For documents: uses OR-Set semantics combined with crdt:createdAt for temporal lifecycle management (document deleted if max(deletedAt) > max(createdAt)), solving zombie deletion problems during recreation scenarios. For property values: simple tombstone semantics using RDF reification (value deleted if reification statement with crdt:deletedAt exists). Framework automatically manages this property by detecting deletions through state comparison - developers simply provide updated resource state and the library implementation handles tombstone creation automatically.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:dateTime .

# --- Retention Policy Configuration ---

crdt:documentTombstoneRetentionPeriod a rdf:Property;
    rdfs:label "document tombstone retention period";
    rdfs:comment "Duration to retain document tombstones (complete deleted documents) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P2Y' for 2 years). Applied to storage backend configuration documents. Longer retention recommended due to high impact of zombie deletions affecting recreated documents.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:duration .

crdt:enableDocumentTombstoneCleanup a rdf:Property;
    rdfs:label "enable document tombstone cleanup";
    rdfs:comment "Boolean flag indicating whether the framework should automatically clean up document tombstones after the retention period. Applied to storage backend configuration documents.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:boolean .

crdt:propertyTombstoneRetentionPeriod a rdf:Property;
    rdfs:label "property tombstone retention period";
    rdfs:comment "Duration to retain property tombstones (deleted values within multi-value properties) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). Applied to storage backend configuration documents. Shorter retention acceptable due to lower impact of zombie deletions.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:duration .

crdt:enablePropertyTombstoneCleanup a rdf:Property;
    rdfs:label "enable property tombstone cleanup";
    rdfs:comment "Boolean flag indicating whether the framework should automatically clean up property tombstones after the retention period. Applied to storage backend configuration documents.";
    rdfs:domain rdfs:Resource;
    rdfs:range xsd:boolean .

