// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Universal Properties for the Idx vocabulary
///
/// Universal properties are RDF properties that have no explicitly defined domain
/// and can therefore be applied to any resource within this vocabulary's context.
/// In RDF, when a property has no rdfs:domain constraint, it can theoretically be
/// used with any subject, but best practice is to use them only within
/// the intended vocabulary context.
///
/// This class collects all such properties from the Idx vocabulary to make them
/// easily accessible without cluttering the class-specific property interfaces.
class IdxUniversalProperties {
  // Private constructor prevents instantiation
  const IdxUniversalProperties._();

  /// indexesClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// Specifies which class of resource this index tracks (e.g., schema:Recipe, idx:Shard, sync:ManagedDocument). Index entries contain resource-level properties for querying, while sync operations depend on resource type: if resources are documents themselves (e.g., idx:FullIndex), all operations are document-level; if resources use fragment identifiers (e.g., schema:Recipe), sync operations are on the containing document while resource operations are on the specific resource.
  ///
  static const indexesClass = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#indexesClass',
  );

  /// indexedProperty [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#IndexedProperty]
  ///
  /// Links an index to an IndexedProperty configuration object that specifies which property should be indexed and tracks which installations read from it.
  ///
  static const indexedProperty = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#indexedProperty',
  );

  /// shardingAlgorithm [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Defines the algorithm used to place new items into shards.
  ///
  static const shardingAlgorithm = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#shardingAlgorithm',
  );

  /// readBy [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// An OR-Set of installation IRIs that actively read from this index or specific indexed property. Used for collaborative lifecycle management and property cleanup when readers are tombstoned.
  ///
  static const readBy = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#readBy',
  );
}
