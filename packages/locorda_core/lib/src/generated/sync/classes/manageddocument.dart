// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// ManagedDocument class from Sync vocabulary
///
/// A document that is managed by the locorda sync framework, containing framework metadata and a primary resource topic.
///
/// Inherits from:
/// - Document (http://xmlns.com/foaf/0.1/Document)
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
/// - Thing (http://www.w3.org/2002/07/owl#Thing)
///
/// This class provides access to all properties that can be used with ManagedDocument.
/// [Class Reference](https://w3id.org/solid-crdt-sync/vocab/sync#ManagedDocument)
///
/// [Vocabulary Reference](https://w3id.org/solid-crdt-sync/vocab/sync#)
class SyncManagedDocument {
  // Private constructor prevents instantiation
  const SyncManagedDocument._();

  /// IRI term for the ManagedDocument class
  /// Use this to specify that a resource is of this type.
  static const classIri = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#ManagedDocument',
  );

  /// isGovernedBy [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data or index resource to the public rules file that defines its merge behavior.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const isGovernedBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#isGovernedBy',
  );

  /// managedResourceType [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// Identifies the semantic RDF class of the resources being managed (e.g., schema:Recipe). Used in two contexts: (1) Within solid:TypeRegistration entries where solid:forClass is sync:ManagedDocument, enabling framework-aware applications to discover containers holding specific semantic types. (2) Directly on sync:ManagedDocument instances to enable efficient garbage collection and retention policies without requiring document content fetching.
  ///
  /// Can be used on all classes in this vocabulary
  ///
  static const managedResourceType = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#managedResourceType',
  );

  /// hasStatement [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement]
  ///
  /// Links a managed document to RDF reification statements that contain framework metadata such as property tombstones. This ensures all framework metadata remains connected to the document for proper framework/app data separation during graph traversal.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/sync#ManagedDocument
  ///
  static const hasStatement = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#hasStatement',
  );

  /// hasClockEntry from crdt vocabulary [Expects: https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#ClockEntry]
  ///
  /// Links a resource to a blank node representing a single entry in its Hybrid Logical Clock (HLC). Each entry tracks both logical time (causality) and physical time (for intuitive tie-breaking) for one installation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtHasClockEntry = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#hasClockEntry',
  );

  /// clockHash from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#string]
  ///
  /// A pre-calculated, lightweight hash of the resource's full Hybrid Logical Clock, used for efficient change detection in indices. Hash includes both logical and physical time components. Domain is kept general (rdfs:Resource) to allow usage in various contexts including idx:ShardEntry instances.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtClockHash = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#clockHash',
  );

  /// createdAt from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Framework-managed timestamp marking when a document or installation was created/recreated. Uses OR-Set semantics to support recreation scenarios and solve zombie deletion problems. Combined with crdt:deletedAt using temporal ordering: document is deleted if max(deletedAt) > max(createdAt). Framework automatically adds creation timestamps during document creation.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtCreatedAt = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#createdAt',
  );

  /// deletedAt from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#dateTime]
  ///
  /// Framework-managed timestamp marking when a document or property value was deleted. For documents: uses OR-Set semantics combined with crdt:createdAt for temporal lifecycle management (document deleted if max(deletedAt) > max(createdAt)), solving zombie deletion problems during recreation scenarios. For property values: simple tombstone semantics using RDF reification (value deleted if reification statement with crdt:deletedAt exists). Framework automatically manages this property by detecting deletions through state comparison - developers simply provide updated resource state and the library implementation handles tombstone creation automatically.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtDeletedAt = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#deletedAt',
  );

  /// documentTombstoneRetentionPeriod from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration to retain document tombstones (complete deleted documents) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P2Y' for 2 years). Applied to storage backend configuration documents. Longer retention recommended due to high impact of zombie deletions affecting recreated documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtDocumentTombstoneRetentionPeriod = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#documentTombstoneRetentionPeriod',
  );

  /// enableDocumentTombstoneCleanup from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// Boolean flag indicating whether the framework should automatically clean up document tombstones after the retention period. Applied to storage backend configuration documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtEnableDocumentTombstoneCleanup = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#enableDocumentTombstoneCleanup',
  );

  /// propertyTombstoneRetentionPeriod from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#duration]
  ///
  /// Duration to retain property tombstones (deleted values within multi-value properties) before garbage collection. Expressed as ISO 8601 duration (e.g., 'P6M' for 6 months). Applied to storage backend configuration documents. Shorter retention acceptable due to lower impact of zombie deletions.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtPropertyTombstoneRetentionPeriod = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#propertyTombstoneRetentionPeriod',
  );

  /// enablePropertyTombstoneCleanup from crdt vocabulary [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// Boolean flag indicating whether the framework should automatically clean up property tombstones after the retention period. Applied to storage backend configuration documents.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const crdtEnablePropertyTombstoneCleanup = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-mechanics#enablePropertyTombstoneCleanup',
  );

  /// belongsToIndexShard from idx vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data resource to the specific index shard it is a member of.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const idxBelongsToIndexShard = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#belongsToIndexShard',
  );

  /// isShardOf from idx vocabulary [Expects: https://w3id.org/solid-crdt-sync/vocab/idx#Index]
  ///
  /// A back-link from a shard to the root index or partition it belongs to.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const idxIsShardOf = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/idx#isShardOf',
  );

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = const IriTerm(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = const IriTerm(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// sha1 from foaf vocabulary
  ///
  /// A sha1sum hash, in hex.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Document
  ///
  static const foafSha1 = const IriTerm('http://xmlns.com/foaf/0.1/sha1');

  /// name from foaf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A name for some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafName = const IriTerm('http://xmlns.com/foaf/0.1/name');

  /// homepage from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A homepage for some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafHomepage = const IriTerm(
    'http://xmlns.com/foaf/0.1/homepage',
  );

  /// maker from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Agent]
  ///
  /// An agent that
  /// made this thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafMaker = const IriTerm('http://xmlns.com/foaf/0.1/maker');

  /// depiction from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Image]
  ///
  /// A depiction of some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafDepiction = const IriTerm(
    'http://xmlns.com/foaf/0.1/depiction',
  );

  /// fundedBy from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// An organization funding a project or person.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafFundedBy = const IriTerm(
    'http://xmlns.com/foaf/0.1/fundedBy',
  );

  /// logo from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A logo representing some thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafLogo = const IriTerm('http://xmlns.com/foaf/0.1/logo');

  /// topic from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A topic of some page or document.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Document
  ///
  static const foafTopic = const IriTerm('http://xmlns.com/foaf/0.1/topic');

  /// primaryTopic from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// The primary topic of some page or document.
  ///
  /// Can be used on: http://xmlns.com/foaf/0.1/Document
  ///
  static const foafPrimaryTopic = const IriTerm(
    'http://xmlns.com/foaf/0.1/primaryTopic',
  );

  /// page from foaf vocabulary [Expects: http://xmlns.com/foaf/0.1/Document]
  ///
  /// A page or document about this thing.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafPage = const IriTerm('http://xmlns.com/foaf/0.1/page');

  /// theme from foaf vocabulary [Expects: http://www.w3.org/2002/07/owl#Thing]
  ///
  /// A theme.
  ///
  /// Can be used on: http://www.w3.org/2002/07/owl#Thing
  ///
  static const foafTheme = const IriTerm('http://xmlns.com/foaf/0.1/theme');
}
