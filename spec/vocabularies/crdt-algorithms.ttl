@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix algo: <https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#> .
@prefix sync: <https://w3id.org/solid-crdt-sync/vocab/sync#> .
@prefix mc: <https://w3id.org/solid-crdt-sync/vocab/merge-contract#> .

# --- Ontology Definition ---

<https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms> a owl:Ontology;
    rdfs:label "CRDT Algorithms Vocabulary";
    rdfs:comment "A vocabulary defining merge algorithms and strategies for state-based CRDTs on RDF data. These algorithms specify how conflicting values should be resolved during synchronization." .

# --- Base Algorithm Class ---

algo:Algorithm a rdfs:Class;
    rdfs:label "CRDT Algorithm";
    rdfs:comment "An abstract base class for a specific CRDT merge algorithm." .

# --- Algorithm Implementations ---

algo:G_Register a rdfs:Class;
    rdfs:label "G-Register";
    rdfs:comment "A Grow-Only Register CRDT, for single-value properties. Takes the maximum. When applied to multi-value properties, takes the maximum of all values. For numeric values (xsd:integer, xsd:decimal, xsd:float, xsd:double etc), maximum is determined numerically; for date/time values (xsd:dateTime, xsd:date, xsd:time), maximum is determined chronologically; for string values (xsd:string), maximum is determined lexicographically; for other types, maximum is determined by comparing their lexical forms as strings. Iris are compared lexicographically. Identified blank nodes are compared lexicographically by their canonical IRIs (max wins), Non-Identified blank nodes are not supported.";
    rdfs:subClassOf algo:Algorithm .

algo:LWW_Register a rdfs:Class;
    rdfs:label "LWW-Register";
    rdfs:comment "A Last-Writer-Wins Register CRDT, for single-value properties. When applied to multi-value properties, treats the complete value set atomically - the most recent complete value set wins, replacing all previous values entirely.";
    rdfs:subClassOf algo:Algorithm .

algo:FWW_Register a rdfs:Class;
    rdfs:label "FWW-Register";
    rdfs:comment "A First-Writer-Wins Register CRDT for properties that should not change after creation. When conflicting values are encountered, the first written value (by timestamp) is preserved and subsequent writes are ignored. For multi-value properties, preserves the first complete value set and ignores subsequent attempts to modify the set.";
    rdfs:subClassOf algo:Algorithm .

algo:OR_Set a rdfs:Class;
    rdfs:label "OR-Set";
    rdfs:comment "An Observed-Remove Set CRDT, for multi-value properties that allows items to be re-added after deletion.";
    rdfs:subClassOf algo:Algorithm .

algo:TwoPSet a rdfs:Class;
    rdfs:label "2P-Set";
    rdfs:comment "A Two-Phase Set CRDT, for multi-value properties where removal is permanent.";
    rdfs:subClassOf algo:Algorithm .

algo:Immutable a rdfs:Class;
    rdfs:label "Immutable";
    rdfs:comment "A CRDT algorithm for properties that must never change after creation. Sync fails if different values are encountered, forcing creation of new resource versions. For multi-value properties, the complete value set is treated as immutable - any attempt to add, remove, or modify values causes merge failure. Unlike FWW-Register which silently ignores conflicts, Immutable enforces strict consistency by rejecting conflicting changes.";
    rdfs:subClassOf algo:Algorithm .

# --- Algorithm Selection Property ---

algo:mergeWith a rdf:Property;
    rdfs:label "merge with";
    rdfs:comment "Links a mc:Rule to the specific CRDT Algorithm to be used for merging.";
    rdfs:domain mc:Rule;
    rdfs:range algo:Algorithm .