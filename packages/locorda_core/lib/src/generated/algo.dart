// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main Algo vocabulary class containing all terms
///
/// Contains all terms defined in the https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms# vocabulary.
class Algo {
  // Private constructor prevents instantiation
  const Algo._();

  /// Base IRI for Algo vocabulary
  /// [Spec](https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#)
  static const String namespace =
      'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#';
  static const String prefix = 'algo';

  /// IRI for algo:Algorithm
  ///
  /// An abstract base class for a specific CRDT merge algorithm.
  ///
  static const Algorithm = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#Algorithm',
  );

  /// IRI for algo:LWW_Register
  ///
  /// A Last-Writer-Wins Register CRDT, for single-value properties. When applied to multi-value properties, treats the complete value set atomically - the most recent complete value set wins, replacing all previous values entirely.
  ///
  static const LWW_Register = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#LWW_Register',
  );

  /// IRI for algo:FWW_Register
  ///
  /// A First-Writer-Wins Register CRDT for properties that should not change after creation. When conflicting values are encountered, the first written value (by timestamp) is preserved and subsequent writes are ignored. For multi-value properties, preserves the first complete value set and ignores subsequent attempts to modify the set.
  ///
  static const FWW_Register = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#FWW_Register',
  );

  /// IRI for algo:OR_Set
  ///
  /// An Observed-Remove Set CRDT, for multi-value properties that allows items to be re-added after deletion.
  ///
  static const OR_Set = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#OR_Set',
  );

  /// IRI for algo:n2P_Set
  ///
  /// A Two-Phase Set CRDT, for multi-value properties where removal is permanent.
  ///
  static const n2P_Set = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#2P_Set',
  );

  /// IRI for algo:Immutable
  ///
  /// A CRDT algorithm for properties that must never change after creation. Sync fails if different values are encountered, forcing creation of new resource versions. For multi-value properties, the complete value set is treated as immutable - any attempt to add, remove, or modify values causes merge failure. Unlike FWW-Register which silently ignores conflicts, Immutable enforces strict consistency by rejecting conflicting changes.
  ///
  static const Immutable = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#Immutable',
  );

  /// IRI for algo:mergeWith [Expects: https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#Algorithm]
  ///
  /// Links a sync:Rule to the specific CRDT Algorithm to be used for merging.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/sync#Rule
  ///
  static const mergeWith = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/crdt-algorithms#mergeWith',
  );
}
