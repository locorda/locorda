// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Main Mc vocabulary class containing all terms
///
/// Contains all terms defined in the https://w3id.org/solid-crdt-sync/vocab/merge-contract# vocabulary.
class Mc {
  // Private constructor prevents instantiation
  const Mc._();

  /// Base IRI for Mc vocabulary
  /// [Spec](https://w3id.org/solid-crdt-sync/vocab/merge-contract#)
  static const String namespace =
      'https://w3id.org/solid-crdt-sync/vocab/merge-contract#';
  static const String prefix = 'mc';

  /// IRI for mc:Mapping
  ///
  /// An abstract base class for a resource that defines a set of merge rules.
  ///
  static const Mapping = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#Mapping',
  );

  /// IRI for mc:ClassMapping
  ///
  /// A resource that defines the merge behavior for a specific class of data (e.g., schema:Recipe).
  ///
  static const ClassMapping = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#ClassMapping',
  );

  /// IRI for mc:DocumentMapping
  ///
  /// A resource that defines the complete merge behavior for all resources within a document, by importing other DocumentMappings and defining local ClassMappings and PredicateMappings.
  ///
  static const DocumentMapping = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#DocumentMapping',
  );

  /// IRI for mc:PredicateMapping
  ///
  /// A resource that defines merge behavior for resources based on the predicates they appear with, useful for typeless blank nodes and predicate-based identification patterns.
  ///
  static const PredicateMapping = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#PredicateMapping',
  );

  /// IRI for mc:Rule
  ///
  /// A declarative rule that links a specific predicate/property to a CRDT merge algorithm.
  ///
  static const Rule = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule',
  );

  /// IRI for mc:appliesToClass [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// Links a Mapping to the class of resource it defines rules for.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Mapping
  ///
  static const appliesToClass = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#appliesToClass',
  );

  /// IRI for mc:imports [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// An ordered list (rdf:List) of DocumentMapping libraries to import, inheriting all their class and predicate mappings. Precedence: Local ClassMapping > Local PredicateMapping > Imported DocumentMapping (list order). Used for importing standard mapping libraries like CRDT or RDF vocabularies.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#DocumentMapping
  ///
  static const imports = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#imports',
  );

  /// IRI for mc:classMapping [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// An ordered list (rdf:List) of ClassMapping resources (either local or external) that define merge behavior for specific classes of resources. Precedence: Local ClassMapping > Local PredicateMapping > Imported DocumentMapping, with list order within each scope.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#DocumentMapping
  ///
  static const classMapping = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#classMapping',
  );

  /// IRI for mc:predicateMapping [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#List]
  ///
  /// An ordered list (rdf:List) of PredicateMapping resources (either local or external) that define merge behavior for resources based on predicates. Precedence: Local ClassMapping > Local PredicateMapping > Imported DocumentMapping, with list order within each scope.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#DocumentMapping
  ///
  static const predicateMapping = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#predicateMapping',
  );

  /// IRI for mc:rule [Expects: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule]
  ///
  /// Links a PredicateMappings or ClassMapping to a specific mapping Rule for one of its predicates.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#PredicateMapping, https://w3id.org/solid-crdt-sync/vocab/merge-contract#ClassMapping
  ///
  static const rule = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#rule',
  );

  /// IRI for mc:predicate [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// Specifies the RDF predicate that a PropertyMapping applies to.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule
  ///
  static const predicate = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#predicate',
  );

  /// IRI for mc:isIdentifying [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// A boolean flag used within mc:Rule to declare whether a specific predicate can be used to identify blank nodes within contexts. This enables context-based blank node identification for CRDT operations that require object identity (e.g., OR-Set, 2P-Set tombstone matching). When true, the predicate serves as part of a compound identification key along with other identifying predicates from any applicable mapping scope.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule
  ///
  static const isIdentifying = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#isIdentifying',
  );

  /// IRI for mc:stopTraversal [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// A boolean flag used within mc:Rule to mark a predicate as a boundary for framework/app data separation during graph traversal. When true, the predicate creates a traversal boundary - the framework will not follow edges with this predicate when separating framework data from application data.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule
  ///
  static const stopTraversal = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#stopTraversal',
  );

  /// IRI for mc:disableBlankNodePathIdentification [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// A boolean flag used within mc:Rule to disable the default path-based identification for blank nodes at this predicate. When true, blank nodes are treated as unidentified (atomic replacement). This flag is rarely needed - property-based identification (mc:isIdentifying) should be preferred when blank nodes need stable identity. Use cases: (1) Atomic replacement desired where all blank node properties should change together as a conceptual unit, (2) Multi-valued blank nodes without identification where atomic LWW replacement is acceptable. Important: This flag only affects path-based identification; property-based identification (mc:isIdentifying true) can and should still be used for collections.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule
  ///
  static const disableBlankNodePathIdentification = IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#disableBlankNodePathIdentification',
  );
}
