// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: lib/models/comment.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field, unnecessary_string_interpolations

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'package:personal_notes_app/models/comment.dart' as comment;
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [comment.Comment] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `comment.Comment`.
class CommentMapper implements GlobalResourceMapper<comment.Comment> {
  static final RegExp _regex = RegExp(
    r'^(?<rootResourceIri>.*)#comment-(?<id>[^/]*)$',
  );

  final String Function() _rootResourceIriProvider;

  /// Constructor
  const CommentMapper({required String Function() rootResourceIriProvider})
      : _rootResourceIriProvider = rootResourceIriProvider;

  @override
  IriTerm? get typeIri => Schema.Comment;

  @override
  comment.Comment fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.value);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id'];
    if (id == null) {
      throw DeserializationException(
        'Missing required IRI part: id in IRI ${subject.value}',
      );
    }
    final String content = reader.require(Schema.text);
    final DateTime createdAt = reader.require(Schema.dateCreated);

    return comment.Comment(id: id, content: content, createdAt: createdAt);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    comment.Comment resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(Schema.text, resource.content)
        .addValue(Schema.dateCreated, resource.createdAt)
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(comment.Comment resource) {
    final id = resource.id;
    final rootResourceIri = _rootResourceIriProvider();
    var interpolatedTemplate = '${rootResourceIri}';
    if (interpolatedTemplate.contains('#')) {
      interpolatedTemplate = interpolatedTemplate.substring(
        0,
        interpolatedTemplate.indexOf('#'),
      );
    }
    return '$interpolatedTemplate#comment-${id}';
  }
}
