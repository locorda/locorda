// Copyright (c) 2025, Klas Kala√ü <habbatical@gmail.com>
// All rights reserved. Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by VocabularyBuilder

import 'package:rdf_core/rdf_core.dart';

/// Rule class from Mc vocabulary
///
/// A declarative rule that links a specific predicate/property to a CRDT merge algorithm.
///
/// Inherits from:
/// - Resource (http://www.w3.org/2000/01/rdf-schema#Resource)
///
/// This class provides access to all properties that can be used with Rule.
/// [Class Reference](https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule)
///
/// [Vocabulary Reference](https://w3id.org/solid-crdt-sync/vocab/merge-contract#)
class McRule {
  // Private constructor prevents instantiation
  const McRule._();

  /// IRI term for the Rule class
  /// Use this to specify that a resource is of this type.
  static const classIri = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule',
  );

  /// predicate [Expects: http://www.w3.org/1999/02/22-rdf-syntax-ns#Property]
  ///
  /// Specifies the RDF predicate that a PropertyMapping applies to.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule
  ///
  static const predicate = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#predicate',
  );

  /// isIdentifying [Expects: http://www.w3.org/2001/XMLSchema#boolean]
  ///
  /// A boolean flag used within mc:Rule to declare whether a specific predicate can be used to identify blank nodes within contexts. This enables context-based blank node identification for CRDT operations that require object identity (e.g., OR-Set, 2P-Set tombstone matching). When true, the predicate serves as part of a compound identification key along with other identifying predicates from any applicable mapping scope.
  ///
  /// Can be used on: https://w3id.org/solid-crdt-sync/vocab/merge-contract#Rule
  ///
  static const isIdentifying = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/merge-contract#isIdentifying',
  );

  /// isGovernedBy from sync vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Links a data or index resource to the public rules file that defines its merge behavior.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const syncIsGovernedBy = const IriTerm(
    'https://w3id.org/solid-crdt-sync/vocab/sync#isGovernedBy',
  );

  /// comment from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A description of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsComment = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#comment',
  );

  /// label from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Literal]
  ///
  /// A human-readable name for the subject.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsLabel = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#label',
  );

  /// seeAlso from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Further information about the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsSeeAlso = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#seeAlso',
  );

  /// isDefinedBy from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// The definition of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsIsDefinedBy = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#isDefinedBy',
  );

  /// member from rdfs vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// A member of the subject resource.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfsMember = const IriTerm(
    'http://www.w3.org/2000/01/rdf-schema#member',
  );

  /// type from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Class]
  ///
  /// The subject is an instance of a class.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfType = const IriTerm(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
  );

  /// value from rdf vocabulary [Expects: http://www.w3.org/2000/01/rdf-schema#Resource]
  ///
  /// Idiomatic property used for structured values.
  ///
  /// Can be used on: http://www.w3.org/2000/01/rdf-schema#Resource
  ///
  static const rdfValue = const IriTerm(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#value',
  );
}
